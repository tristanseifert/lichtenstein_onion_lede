/dts-v1/;

#include "OMEGA2.dtsi"

/ {
	model = "Onion Omega2+ (Lichtenstein)";

	/* add the ethernet link and activity LEDs */
	gpio-leds {
		compatible = "gpio-leds";

		/* omega on-board system LED */
		system_led: system {
			gpios = <&gpio1 12 GPIO_ACTIVE_LOW>;
		};

		/* Ethernet activity LEDs */
		eth_link_led: ethlink {
			/*gpios = <&gpio0 18 GPIO_ACTIVE_HIGH>;*/
			gpios = <&gpio0 1 GPIO_ACTIVE_HIGH>;
		};

		eth_act_led: ethact {
			/*gpios = <&gpio0 19 GPIO_ACTIVE_HIGH>;*/
			gpios = <&gpio0 0 GPIO_ACTIVE_HIGH>;
		};

		/* status LEDs */
		status_0_led: status0 {
			gpios = <&expander 3 GPIO_ACTIVE_HIGH>;
		};
		status_1_led: status1 {
			gpios = <&expander 2 GPIO_ACTIVE_HIGH>;
		};
		status_2_led: status2 {
			gpios = <&expander 1 GPIO_ACTIVE_HIGH>;
		};
		status_3_led: status3 {
			gpios = <&expander 0 GPIO_ACTIVE_HIGH>;
		};
	};

	/* specify the 128M of memory on the Omega2+ */
	memory@0 {
		device_type = "memory";
		reg = <0x0 0x8000000>;
	};
};

/* define address of firmware in flash */
&firmware {
	reg = <0x50000 0x1fb0000>;
};

/* I2C bus expander (MCP23017) */
&i2c {
	expander: mcp23017@20 {
		/* force the kernel to match to a driver */
		status = "okay";

		/* MCP23017 driver */
		compatible = "microchip,mcp23017";
		#gpio-cells = <2>;

		gpio-controller;

		/* I2C address (all address pins low) */
		reg = <0x20>;

		/* IRQ configuration (this doesn't workâ€¦) */
		#interrupt-cells = <2>;
		interrupt-parent = <&gpio1>;
		interrupts = <2 2>;
		interrupt-controller;
		microchip,irq-mirror;
	};

	/* expansion board EEPROM, default address 0x50 */
	expansion_id: eeprom@50 {
		/* force the kernel to match to a driver */
		status = "okay";

		/* we use 24C02 EEPROMs */
		compatible = "atmel,24c02";
		reg = <0x50>;
		pagesize = <8>;

		/* force read-only */
		/*read-only;*/
	};

	/* on-board output EEPROM, default address 0x51 */
	onboard_id: eeprom@51 {
		/* force the kernel to match to a driver */
		status = "okay";

		/* we use 24C02 EEPROMs */
		compatible = "atmel,24c02";
		reg = <0x51>;
		pagesize = <8>;

		/* force read-only */
		/*read-only;*/
	};

	/* optional temperature sensor */
	board_temp: lm75@48 {
		/* force the kernel to match to a driver */
		status = "okay";

		/* the board has an LM75BD at addrexx 0x48 */
		compatible = "national,lm75b";
		reg = <0x48>;
	};
};



/* assign labels to the system and Ethernet LEDs */
&system_led {
	label = "omega2_system_led";
};

&eth_link_led {
	label = "lichtenstein_ethlink_led";
};

&eth_act_led {
	label = "lichtenstein_ethact_led";
};


/* assign labels to the status LEDs */
&status_0_led {
	label = "lichtenstein_status0_led";
};
&status_1_led {
	label = "lichtenstein_status1_led";
};
&status_2_led {
	label = "lichtenstein_status2_led";
};
&status_3_led {
	label = "lichtenstein_status3_led";
};


/* reduce SPI speed to 20MHz, and declare extra chip select */
&spi0 {
	/* first two native chip selects, third GPIO chip select */
	cs-gpios = <0>, <0>, <&gpio0 16 GPIO_ACTIVE_LOW>;
	num-cs = <3>;

	/* internal flash */
	m25p80@0 {
		spi-max-frequency = <20000000>;
	};

	/* expansion header */
	spidev@1 {
		spi-max-frequency = <20000000>;
	};

	/* internal SPI device */
	spidev@2 {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "linux,spidev";
		reg = <2>;

		spi-max-frequency = <20000000>;
	};
};

/* Declare state of pins on boot */
&pinctrl {
	state_default: pinctrl0 {
		/* PWMs are used with the PWM peripheral */
		pwm0 {
			ralink,group = "pwm0";
			ralink,function = "pwm0";
		};
		pwm1 {
			ralink,group = "pwm1";
			ralink,function = "pwm1";
		};

		/* I2S pins are used as gpio */
		i2s {
			ralink,group = "i2s";
			ralink,function = "gpio";
		};

		/* UART1 and 2 pins are used as GPIOs */
		uart1 {
			ralink,group = "uart1";
			ralink,function = "gpio";
		};
		uart2 {
			ralink,group = "uart2";
			ralink,function = "gpio";
		};
	};
};
